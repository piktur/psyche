type Address implements Node {
  city: String!
  country: String!
  id: ID!
  postcode: String!
  state: String!
  street: [String!]!
}

# Autogenerated input type of Authenticate
input AuthenticateInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  password: String!
}

# Autogenerated return type of Authenticate
type AuthenticatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [Error]
  token: String
  user: User
}

type Contact implements Node {
  id: ID!
  phone: String!
}

type Error {
  message: String!
  path: String
}

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

type Mutation {
  authenticate(input: AuthenticateInput!): AuthenticatePayload

  # Internal API, exports mock data
  setup(input: SetupInput!): SetupPayload
  signUp(input: SignUpInput!): SignUpPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

type Profile implements Node {
  address: Address!
  birthday: ISO8601DateTime!
  contact: Contact!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

type Query {
  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node

  # Fetches a list of objects given a list of IDs.
  nodes(
    # IDs of the objects.
    ids: [ID!]!
  ): [Node]!
  user(id: ID!): User!
  users: [User!]!
  viewer: User
}

# Autogenerated input type of Setup
input SetupInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  validFor: Int
}

# Autogenerated return type of Setup
type SetupPayload {
  adminToken: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  clinicToken: String
  clinicianToken: String
  customerToken: String
}

# Autogenerated input type of SignUp
input SignUpInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  password: String!
}

# Autogenerated return type of SignUp
type SignUpPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [Error]
  token: String
  user: User
}

type User implements Node {
  email: String!
  id: ID!
  profile: Profile
  role: Int!
  updatedAt: ISO8601DateTime!
}